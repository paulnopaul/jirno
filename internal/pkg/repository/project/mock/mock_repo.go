// Code generated by MockGen. DO NOT EDIT.
// Source: jirno/internal/pkg/domain (interfaces: IProjectRepo)

// Package mock is a generated GoMock package.
package mock

import (
	"jirno/internal/pkg/domain/project"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIProjectRepo is a mock of IProjectRepo interface.
type MockIProjectRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIProjectRepoMockRecorder
}

// MockIProjectRepoMockRecorder is the mock recorder for MockIProjectRepo.
type MockIProjectRepoMockRecorder struct {
	mock *MockIProjectRepo
}

// NewMockIProjectRepo creates a new mock instance.
func NewMockIProjectRepo(ctrl *gomock.Controller) *MockIProjectRepo {
	mock := &MockIProjectRepo{ctrl: ctrl}
	mock.recorder = &MockIProjectRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProjectRepo) EXPECT() *MockIProjectRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIProjectRepo) Create(arg0 project.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIProjectRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIProjectRepo)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockIProjectRepo) Delete(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIProjectRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIProjectRepo)(nil).Delete), arg0)
}

// GetByFilter mocks base method.
func (m *MockIProjectRepo) GetByFilter(arg0 project.ProjectFilter) ([]project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", arg0)
	ret0, _ := ret[0].([]project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockIProjectRepoMockRecorder) GetByFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockIProjectRepo)(nil).GetByFilter), arg0)
}

// GetByID mocks base method.
func (m *MockIProjectRepo) GetByID(arg0 uuid.UUID) (*project.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*project.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIProjectRepoMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIProjectRepo)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockIProjectRepo) Update(arg0 project.ProjectUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIProjectRepoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIProjectRepo)(nil).Update), arg0)
}
