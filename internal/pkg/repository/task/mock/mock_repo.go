// Code generated by MockGen. DO NOT EDIT.
// Source: jirno/internal/pkg/domain (interfaces: ITaskRepo)

// Package mock is a generated GoMock package.
package mock

import (
	"jirno/internal/pkg/domain/task"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockITaskRepo is a mock of ITaskRepo interface.
type MockITaskRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITaskRepoMockRecorder
}

// MockITaskRepoMockRecorder is the mock recorder for MockITaskRepo.
type MockITaskRepoMockRecorder struct {
	mock *MockITaskRepo
}

// NewMockITaskRepo creates a new mock instance.
func NewMockITaskRepo(ctrl *gomock.Controller) *MockITaskRepo {
	mock := &MockITaskRepo{ctrl: ctrl}
	mock.recorder = &MockITaskRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskRepo) EXPECT() *MockITaskRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITaskRepo) Create(arg0 task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITaskRepoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITaskRepo)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockITaskRepo) Delete(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockITaskRepoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITaskRepo)(nil).Delete), arg0)
}

// GetByFilter mocks base method.
func (m *MockITaskRepo) GetByFilter(arg0 task.TaskFilter) ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilter", arg0)
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilter indicates an expected call of GetByFilter.
func (mr *MockITaskRepoMockRecorder) GetByFilter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilter", reflect.TypeOf((*MockITaskRepo)(nil).GetByFilter), arg0)
}

// GetByID mocks base method.
func (m *MockITaskRepo) GetByID(arg0 uuid.UUID) (*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockITaskRepoMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITaskRepo)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockITaskRepo) Update(arg0 task.TaskUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITaskRepoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITaskRepo)(nil).Update), arg0)
}
